You are working with a database table that contains data about music artists. The table is named artist. You want to review all the columns in the table. 
Add a FROM clause that will retrieve the data from the artist table.

SELECT
*
FROM artist

You are working with a database table that contains data about music albums. You are only interested in data related to the album with ID number 277. 
The album IDs are listed in the album_id column from the album table. Add a WHERE clause that will return only data about the album with ID number 277.

SELECT
*
FROM album
WHERE album_id = '277' 


You are writing a SQL query to filter data from a database that describes trees in Omaha, Nebraska. You want to only display entries for trees 
that have a diameter of 30 inches. The name of the table youâ€™re using is Nebraska_trees and the name of the column that shows 
the diameters of the trees is trunk_diameter. How is the correct query syntax that will retrieve and filter data from this table? 

SELECT * 
FROM Nebraska_trees 
WHERE trunk_diameter = 30

You are working with a database table that contains customer data. The state column lists the state where each customer is located.
The state names are abbreviated. You want to find out which customers are located in the state of Florida (FL). Add a WHERE clause that will return 
only customers located in FL.

SELECT
*
FROM
customer
WHERE state = 'FL'

You are working with a database table that contains data about playlists for different types of digital media. The table includes columns for playlist_id and name.
You want to remove duplicate entries for playlist names and sort the results by playlist ID. 
Write the SQL query that will remove duplicate entries from the name column. 

SELECT 
  DISTINCT name
FROM playlist
ORDER BY
  playlist_id
  
  
 You are working with a database table that contains data about music albums. The table includes columns for album_id, title, and artist_id.
 You want to check for album titles that are less than 4 characters long. 
 Write the SQL query that will return any album titles that are less than 4 characters long.
 
SELECT *
FROM album
WHERE
  length(title) < 
 
 
 
You are working with a database table that contains customer data. The table includes columns about customer location such as city, state, and country. 
You want to retrieve the first 3 letters of each country name. You decide to use the SUBSTR function to retrieve the first 3 letters of each country name, 
and use the AS command to store the result in a new column called new_country. 

You write the SQL query that will retrieve the first 3 letters of each country name and store the result in a new column as new_country. 

SELECT customer_id, 
  SUBSTR(country, 1, 3) AS new_country 
FROM customer 
ORDER BY country

You are working with a database table that contains invoice data. The table includes columns for invoice_id and customer_id.
You want to remove duplicate entries for customer ID and sort the results by invoice ID. 
You write the SQL query that will remove duplicate entries from the customer_id column. 
 
SELECT 
  DISTINCT customer_id
FROM invoice
ORDER BY invoice_id

You are working with a database table that contains customer data. The table includes columns about customer location such as city, 
state, country, and postal_code. You want to check for postal codes that are greater than 7 characters long. 
You write the SQL query that will return any postal codes that are greater than 7 characters long.

SELECT *
FROMcustomer
WHERE
  LENGTH (postal_code) > 7


You are working with a database table that contains invoice data. The table includes columns about billing location such as billing_city, billing_state, 
and billing_country. You want to retrieve the first 4 letters of each city name. 
You decide to use the SUBSTR function to retrieve the first 4 letters of each city name, and use the AS command to store the result in a new column called new_city. 

You write the SQL query that will retrieve the first 4 letters of each city name and store the result in a new column as new_city. 

SELECT invoice_id,
  SUBSTR(billing_city,1,4) AS new_city
FROM invoice
ORDER BY billing_city
